# Configuration Python moderne pour Job Keywords Analyzer
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "job-keywords-analyzer"
version = "1.0.0"
description = "Application d'analyse des mots-clés d'offres d'emploi avec IA"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Job Analyzer Team", email = "team@job-analyzer.com"}
]
maintainers = [
    {name = "Job Analyzer Team", email = "team@job-analyzer.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic"
]
keywords = ["job-analysis", "nlp", "scraping", "fastapi", "react", "elasticsearch"]
requires-python = ">=3.11"

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "pymysql>=1.1.0",
    "alembic>=1.12.1",
    "scrapy>=2.11.0",
    "spacy>=3.7.2",
    "redis>=5.0.1",
    "rq>=1.15.1",
    "elasticsearch>=8.11.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "python-dateutil>=2.8.2",
    "loguru>=0.7.2"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-html>=4.1.1",
    "pytest-xdist>=3.3.1",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
    "pylint>=3.0.3",
    "pydocstyle>=6.3.0"
]

test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0"
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.2"
]

production = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.19.0"
]

[project.urls]
Homepage = "https://github.com/your-org/job-keywords-analyzer"
Documentation = "https://job-analyzer.readthedocs.io/"
Repository = "https://github.com/your-org/job-keywords-analyzer.git"
Issues = "https://github.com/your-org/job-keywords-analyzer/issues"
Changelog = "https://github.com/your-org/job-keywords-analyzer/blob/main/CHANGELOG.md"

[project.scripts]
job-analyzer = "backend.cli:main"
scrape-jobs = "backend.scraper.runner:cli"

# ===================================
# CONFIGURATION BLACK
# ===================================
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# ===================================
# CONFIGURATION ISORT
# ===================================
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["backend", "scraper", "models", "api", "services"]
known_third_party = ["fastapi", "sqlalchemy", "scrapy", "spacy", "redis", "elasticsearch"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ===================================
# CONFIGURATION MYPY
# ===================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true

# Modules sans types
[[tool.mypy.overrides]]
module = [
    "scrapy.*",
    "spacy.*",
    "redis.*",
    "rq.*",
    "elasticsearch.*",
    "fake_useragent.*",
    "factory_boy.*"
]
ignore_missing_imports = true

# ===================================
# CONFIGURATION PYTEST
# ===================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "spider: marks tests for scrapy spiders",
    "nlp: marks tests for NLP functionality",
    "api: marks tests for API endpoints"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# ===================================
# CONFIGURATION COVERAGE
# ===================================
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/node_modules/*",
    "backend/alembic/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ===================================
# CONFIGURATION BANDIT
# ===================================
[tool.bandit]
exclude_dirs = ["tests", "migrations", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used, shell_injection for subprocess

# ===================================
# CONFIGURATION PYLINT
# ===================================
[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "line-too-long",  # Géré par black
    "import-error",   # Géré par mypy
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 50

# ===================================
# CONFIGURATION PYDOCSTYLE
# ===================================
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
match_dir = "^(?!migrations).*"