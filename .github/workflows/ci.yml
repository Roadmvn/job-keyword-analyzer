name: CI - Tests et Qualité du Code

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===================================
  # TESTS BACKEND PYTHON
  # ===================================
  backend-tests:
    name: Tests Backend (Python)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testroot
          MYSQL_DATABASE: job_analyzer_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms256m -Xmx256m
        ports:
          - 9200:9200
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-html pytest-xdist

    - name: Wait for services to be ready
      run: |
        # Attendre MySQL
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptestroot; do
          echo "Waiting for MySQL..."
          sleep 5
        done
        
        # Attendre Redis
        until redis-cli -h 127.0.0.1 -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
        # Attendre Elasticsearch
        until curl -f http://127.0.0.1:9200/_cluster/health; do
          echo "Waiting for Elasticsearch..."
          sleep 5
        done

    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: mysql+pymysql://test_user:testpass@127.0.0.1:3306/job_analyzer_test
        REDIS_URL: redis://127.0.0.1:6379/15
        ELASTICSEARCH_URL: http://127.0.0.1:9200
        SECRET_KEY: test-secret-key-ci
        ENVIRONMENT: test
        DEBUG: true
      run: |
        python -m pytest tests/ \
          --verbose \
          --tb=short \
          --cov=. \
          --cov-report=html:htmlcov \
          --cov-report=xml:coverage.xml \
          --cov-report=term-missing \
          --junit-xml=pytest-results.xml \
          --maxfail=5 \
          -n auto

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/pytest-results.xml
          backend/htmlcov/
        retention-days: 7

  # ===================================
  # TESTS FRONTEND REACT
  # ===================================
  frontend-tests:
    name: Tests Frontend (React)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./frontend
      env:
        CI: true
        VITE_API_URL: http://localhost:8000
      run: |
        npm run test -- \
          --coverage \
          --watchAll=false \
          --testResultsProcessor=jest-sonar-reporter \
          --coverageDirectory=coverage

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-report.xml
        retention-days: 7

  # ===================================
  # LINTING ET QUALITÉ DU CODE
  # ===================================
  code-quality:
    name: Qualité du Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety

    - name: Run Black formatting check
      working-directory: ./backend
      run: black --check --diff .

    - name: Run isort import sorting check
      working-directory: ./backend
      run: isort --check-only --diff .

    - name: Run Flake8 linting
      working-directory: ./backend
      run: flake8 . --max-line-length=88 --extend-ignore=E203,W503

    - name: Run MyPy type checking
      working-directory: ./backend
      run: mypy . --ignore-missing-imports

    - name: Run Bandit security linting
      working-directory: ./backend
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Run Safety security check
      working-directory: ./backend
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
        retention-days: 7

  # ===================================
  # BUILD ET VALIDATION DOCKER
  # ===================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: job-analyzer-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: job-analyzer-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        # Test que les images se buildent et démarrent
        docker-compose -f docker-compose.test.yml config
        docker-compose -f docker-compose.test.yml build --no-cache

  # ===================================
  # TESTS D'INTÉGRATION
  # ===================================
  integration-tests:
    name: Tests d'Intégration
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run integration tests with Docker Compose
      run: |
        # Démarrer l'environnement de test
        docker-compose -f docker-compose.test.yml up -d --build
        
        # Attendre que les services soient prêts
        sleep 60
        
        # Exécuter les tests d'intégration
        docker-compose -f docker-compose.test.yml exec -T backend_tests \
          python -m pytest tests/integration/ --verbose
        
        # Nettoyer
        docker-compose -f docker-compose.test.yml down -v

  # ===================================
  # ANALYSE DE SÉCURITÉ
  # ===================================
  security-scan:
    name: Analyse de Sécurité
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===================================
  # NOTIFICATION DES RÉSULTATS
  # ===================================
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality, integration-tests]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"
        
        if [[ "${{ needs.backend-tests.result }}" == "failure" || 
              "${{ needs.frontend-tests.result }}" == "failure" || 
              "${{ needs.code-quality.result }}" == "failure" || 
              "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed"
        fi