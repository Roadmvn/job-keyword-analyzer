name: CD - D√©ploiement Continu

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===================================
  # BUILD ET PUBLICATION DES IMAGES
  # ===================================
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VITE_API_URL=${{ secrets.VITE_API_URL }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: backend-sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: backend-sbom.spdx.json

  # ===================================
  # TESTS DE S√âCURIT√â SUR LES IMAGES
  # ===================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ===================================
  # D√âPLOIEMENT STAGING
  # ===================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    
    environment:
      name: staging
      url: https://staging.job-analyzer.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        
        # Ici vous ajouteriez votre logique de d√©ploiement
        # Exemples:
        # - kubectl apply -f k8s/
        # - docker-compose -f docker-compose.staging.yml up -d
        # - scp docker-compose.yml user@staging-server:
        # - ssh user@staging-server "docker-compose pull && docker-compose up -d"
        
        echo "‚úÖ Staging deployment completed"

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging..."
        
        # Tests de base pour v√©rifier que l'app fonctionne
        curl -f https://staging.job-analyzer.example.com/health || exit 1
        curl -f https://staging.job-analyzer.example.com/api/stats || exit 1
        
        echo "‚úÖ Smoke tests passed"

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Staging deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Environment: staging
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===================================
  # D√âPLOIEMENT PRODUCTION
  # ===================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.environment == 'production'
    
    environment:
      name: production
      url: https://job-analyzer.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment
      uses: actions/github-script@v6
      id: deployment
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        
        # Logique de d√©ploiement production
        # Exemple avec rolling update:
        # kubectl set image deployment/job-analyzer-api api=${{ needs.build-and-push.outputs.image-tag }}
        # kubectl rollout status deployment/job-analyzer-api
        
        echo "‚úÖ Production deployment completed"

    - name: Run production smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        
        # Tests critiques pour la production
        curl -f https://job-analyzer.example.com/health || exit 1
        curl -f https://job-analyzer.example.com/api/stats || exit 1
        
        echo "‚úÖ Production smoke tests passed"

    - name: Update deployment status (success)
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'success',
            environment_url: 'https://job-analyzer.example.com',
            description: 'Deployment completed successfully'
          });

    - name: Update deployment status (failure)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'failure',
            description: 'Deployment failed'
          });

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          üöÄ Production deployment ${{ job.status }}
          Tag: ${{ github.ref }}
          Commit: ${{ github.sha }}
          URL: https://job-analyzer.example.com
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===================================
  # ROLLBACK EN CAS D'√âCHEC
  # ===================================
  rollback:
    name: Rollback if needed
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()

    steps:
    - name: Rollback production deployment
      run: |
        echo "üîÑ Rolling back production deployment..."
        
        # Logique de rollback
        # kubectl rollout undo deployment/job-analyzer-api
        # docker-compose -f docker-compose.prod.yml down
        # docker-compose -f docker-compose.prod.yml up -d --force-recreate
        
        echo "‚úÖ Rollback completed"

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        text: |
          ‚ö†Ô∏è Production rollback executed
          Reason: Deployment failure
          Branch: ${{ github.ref }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}