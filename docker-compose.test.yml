# Configuration Docker Compose pour les TESTS
# Environnement de test avec bases de données temporaires

version: '3.8'

services:
  # ===================================
  # BASE DE DONNÉES MYSQL DE TEST
  # ===================================
  mysql_test:
    image: mysql:8.0
    container_name: job-analyzer-mysql-test
    environment:
      MYSQL_ROOT_PASSWORD: testroot
      MYSQL_DATABASE: job_analyzer_test
      MYSQL_USER: test_user
      MYSQL_PASSWORD: testpass
    tmpfs:
      - /var/lib/mysql  # Base de données en mémoire pour les tests
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ptestroot"]
      interval: 5s
      timeout: 3s
      retries: 10

  # ===================================
  # REDIS DE TEST
  # ===================================
  redis_test:
    image: redis:7-alpine
    container_name: job-analyzer-redis-test
    command: redis-server --save "" --appendonly no  # Pas de persistance pour les tests
    tmpfs:
      - /data
    networks:
      - test_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ===================================
  # ELASTICSEARCH DE TEST
  # ===================================
  elasticsearch_test:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: job-analyzer-elasticsearch-test
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - cluster.name=test-cluster
    tmpfs:
      - /usr/share/elasticsearch/data
    networks:
      - test_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10

  # ===================================
  # TESTS BACKEND
  # ===================================
  backend_tests:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    container_name: job-analyzer-backend-tests
    environment:
      - DATABASE_URL=mysql+pymysql://test_user:testpass@mysql_test:3306/job_analyzer_test
      - REDIS_URL=redis://redis_test:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch_test:9200
      - SECRET_KEY=test-secret-key
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=test
    volumes:
      - ./backend:/app
      - ./test-results:/app/test-results
    networks:
      - test_network
    depends_on:
      mysql_test:
        condition: service_healthy
      redis_test:
        condition: service_healthy
      elasticsearch_test:
        condition: service_healthy
    command: >
      sh -c "
        python -m pytest tests/ 
        --verbose 
        --tb=short 
        --cov=. 
        --cov-report=html:/app/test-results/coverage-backend
        --cov-report=xml:/app/test-results/coverage-backend.xml
        --junit-xml=/app/test-results/pytest-backend.xml
      "

  # ===================================
  # TESTS FRONTEND
  # ===================================
  frontend_tests:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    container_name: job-analyzer-frontend-tests
    environment:
      - CI=true
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - ./test-results:/app/test-results
    networks:
      - test_network
    command: >
      sh -c "
        npm run test:coverage -- 
        --coverage 
        --watchAll=false 
        --testResultsProcessor=jest-sonar-reporter
        --coverageDirectory=/app/test-results/coverage-frontend
      "

  # ===================================
  # TESTS D'INTÉGRATION
  # ===================================
  integration_tests:
    build:
      context: ./tests/integration
      dockerfile: Dockerfile
    container_name: job-analyzer-integration-tests
    environment:
      - API_BASE_URL=http://api_test:8000
      - FRONTEND_BASE_URL=http://frontend_test:3000
      - DATABASE_URL=mysql+pymysql://test_user:testpass@mysql_test:3306/job_analyzer_test
    volumes:
      - ./tests:/app/tests
      - ./test-results:/app/test-results
    networks:
      - test_network
    depends_on:
      - api_test
      - frontend_test
    command: >
      sh -c "
        python -m pytest tests/integration/ 
        --verbose 
        --tb=short
        --junit-xml=/app/test-results/pytest-integration.xml
      "

  # ===================================
  # API DE TEST
  # ===================================
  api_test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: job-analyzer-api-test
    environment:
      - DATABASE_URL=mysql+pymysql://test_user:testpass@mysql_test:3306/job_analyzer_test
      - REDIS_URL=redis://redis_test:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch_test:9200
      - SECRET_KEY=test-secret-key
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=test
    networks:
      - test_network
    depends_on:
      mysql_test:
        condition: service_healthy
      redis_test:
        condition: service_healthy
      elasticsearch_test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================================
  # FRONTEND DE TEST
  # ===================================
  frontend_test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: job-analyzer-frontend-test
    environment:
      - VITE_API_URL=http://api_test:8000
    networks:
      - test_network
    depends_on:
      - api_test

# ===================================
# RÉSEAUX
# ===================================
networks:
  test_network:
    driver: bridge