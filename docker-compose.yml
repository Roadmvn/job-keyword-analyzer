version: '3.8'

services:
  # ===================================
  # BASE DE DONNÉES MYSQL
  # ===================================
  mysql:
    image: mysql:8.0
    container_name: job-analyzer-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - job_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================================
  # REDIS POUR LES FILES DE TÂCHES
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: job-analyzer-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - job_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================================
  # ELASTICSEARCH POUR LA RECHERCHE
  # ===================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: job-analyzer-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - job_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===================================
  # API BACKEND (FASTAPI)
  # ===================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: job-analyzer-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./backend:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    networks:
      - job_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================
  # WORKER POUR LES TÂCHES ASYNC
  # ===================================
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: job-analyzer-worker
    restart: unless-stopped
    command: python -m rq worker --url ${REDIS_URL}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - SPACY_MODEL=${SPACY_MODEL}
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - job_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # ===================================
  # FRONTEND REACT
  # ===================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: job-analyzer-frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - job_network
    depends_on:
      - api

  # ===================================
  # NGINX REVERSE PROXY (OPTIONNEL)
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: job-analyzer-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - job_network
    depends_on:
      - api
      - frontend
    profiles:
      - production

# ===================================
# VOLUMES PERSISTANTS
# ===================================
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

# ===================================
# RÉSEAU
# ===================================
networks:
  job_network:
    driver: bridge 