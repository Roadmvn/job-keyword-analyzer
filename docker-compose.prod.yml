# Configuration Docker Compose pour la PRODUCTION
# Utilise des images optimisées et des configurations de sécurité renforcées

version: '3.8'

services:
  # ===================================
  # BASE DE DONNÉES MYSQL
  # ===================================
  mysql:
    image: mysql:8.0
    container_name: job-analyzer-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    networks:
      - job_network_prod
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ===================================
  # REDIS POUR LES FILES DE TÂCHES
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: job-analyzer-redis-prod
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD} 
      --appendonly yes 
      --appendfsync everysec
      --save 900 1 
      --save 300 10 
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    networks:
      - job_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ===================================
  # ELASTICSEARCH POUR LA RECHERCHE
  # ===================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: job-analyzer-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - cluster.name=job-analyzer-cluster
      - node.name=job-analyzer-node
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    networks:
      - job_network_prod
    healthcheck:
      test: ["CMD-SHELL", "curl -f -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # ===================================
  # API BACKEND (FASTAPI)
  # ===================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
    image: job-analyzer-api:${VERSION:-latest}
    container_name: job-analyzer-api-prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
    networks:
      - job_network_prod
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ===================================
  # WORKER POUR LES TÂCHES ASYNC
  # ===================================
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: job-analyzer-api:${VERSION:-latest}
    container_name: job-analyzer-worker-prod
    restart: unless-stopped
    command: python -m rq worker --url ${REDIS_URL} --name worker-prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - SPACY_MODEL=${SPACY_MODEL}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - job_network_prod
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ===================================
  # FRONTEND REACT
  # ===================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL}
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
    image: job-analyzer-frontend:${VERSION:-latest}
    container_name: job-analyzer-frontend-prod
    restart: unless-stopped
    networks:
      - job_network_prod
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ===================================
  # NGINX REVERSE PROXY
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: job-analyzer-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - job_network_prod
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ===================================
  # MONITORING - PROMETHEUS (optionnel)
  # ===================================
  prometheus:
    image: prom/prometheus:latest
    container_name: job-analyzer-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - job_network_prod
    profiles:
      - monitoring

  # ===================================
  # MONITORING - GRAFANA (optionnel)
  # ===================================
  grafana:
    image: grafana/grafana:latest
    container_name: job-analyzer-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - job_network_prod
    profiles:
      - monitoring

# ===================================
# VOLUMES PERSISTANTS
# ===================================
volumes:
  mysql_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  elasticsearch_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===================================
# RÉSEAUX
# ===================================
networks:
  job_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16